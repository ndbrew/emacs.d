#+property: header-args :tangle init.el :results none

* Booting Up
** Emacs Initialization File
Use ~/.emacs.d/init.el to store my configuration to keep all configuration files in the
the .emacs.d directory.

Emacs loads the configuration files in the following order:
1. ~/.emacs.el
2. ~/.emacs
3. ~/.emacs.d/init.el

** Emacs Package Manager
Load package, configure the package-archives and refresh package content.
Not sure I like refreshing the package contents on each emacs load.
Seems to take a while.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Make all commands of the “package” module present.
(require 'package)

;; Internet repositories for new packages.
(setq package-archives '(("gnu"    . "http://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("melpa"  . "http://melpa.org/packages/")))

;; Update local list of available packages:
;; Get descriptions of all configured ELPA packages,
;; and make them available for download.
(package-refresh-contents)
#+END_SRC

- All installed packages are placed, by default, in =~/.emacs.d/elpa=.

The declarative configuration tool [[https://github.com/jwiegley/use-package/][use-package]] is a macro/interface
that manages other packages and the way they interact.
- It allows us to tersely organise a package's configuration.
  - By default, ~(use-package foo)~ only loads a package, if it's on our system.
    - Use the standalone keyword ~:disabled~ to turn off loading
      a module that, say, you're not using anymore.
- It is /not/ a package manger, but we can make it one by having it automatically
  install modules, via Emacs packing mechanism, when they're not in our system.

  We achieve this by using the keyword option ~:ensure t~.
- Here are common keywords we will use, in super simplified terms.
  - ~:init   f₁ … fₙ~  /Always/ executes code forms ~fᵢ~ /before/ loading a package.
  - ~:diminish str~  Uses /optional/ string ~str~ in the modeline to indicate
    this module is active. Things we use often needn't take
    real-estate down there and so no we provide no ~str~.
  - ~:config f₁ … fₙ~ /Only/ executes code forms ~fᵢ~ /after/ loading a package.

    The remaining keywords only take affect /after/ a module loads.

  - ~:bind ((k₁ . f₁) … (kₙ . fₙ)~ Lets us bind keys ~kᵢ~, such as
    ~"M-s o"~, to functions, such as =occur=.
    - When /n = 1/, the extra outer parenthesis are not necessary.
  - ~:hook ((m₁ … mₙ) . f)~ Enables functionality ~f~ whenever we're in one of the
    modes ~mᵢ~, such as ~org-mode~. The ~. f~, along with the outermost parenthesis,
    is optional and defaults to the name of the package ---Warning: Erroneous
    behaviour happens if the package's name is not a function provided by the
    package; a common case is when package's name does /not/ end in ~-mode~,
    leading to the invocation ~((m₁ … mₙ) . <whatever-the-name-is>-mode)~ instead.

    Additionally, when /n = 1/, the extra outer parenthesis are not necessary.

    Outside of =use-package=, one normally uses a ~add-hook~ clause.  Likewise, an
    ‘advice’ can be given to a function to make it behave differently ---this is
    known as ‘decoration’ or an ‘attribute’ in other languages.

  - ~:custom (k₁ v₁ d₁) … (kₙ vₙ dₙ)~ Sets a package's custom variables ~kᵢ~ to have
    values ~vᵢ~, along with /optional/ user documentation ~dᵢ~ to explain to yourself,
    in the future, why you've made this decision.

    This is essentially ~setq~ within ~:config~.

We now bootstrap ~use-package~.
#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

We can now invoke ~(use-package XYZ :ensure t)~ which should check for the ~XYZ~
package and make sure it is accessible.  If not, the ~:ensure t~ part tells
~use-package~ to download it ---using the built-in ~package~ manager--- and place it
somewhere accessible, in =~/.emacs.d/elpa/= by default.  By default we would like
to download packages, since I do not plan on installing them manually by
downloading Lisp files and placing them in the correct places on my system.
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src
The use of ~:ensure t~ only installs absent modules, but it does no updating.
Let's set up [[https://github.com/rranelli/auto-package-update.el][an auto-update mechanism]].
#+begin_src emacs-lisp
  (use-package auto-package-update
    :defer 10
    :config
    ;; Delete residual old versions
    (setq auto-package-update-delete-old-versions t)
    ;; Do not bother me when updates have taken place.
    (setq auto-package-update-hide-results t)
    ;; Update installed packages at startup if there is an update pending.
    (auto-package-update-maybe))
#+end_src

Here's another example use of ~use-package~.  Later on, I have a “show recent files
pop-up” command set to ~C-x C-r~; but what if I forget? This mode shows me all key
completions when I type ~C-x~, for example.  Moreover, I will be shown other
commands I did not know about! Neato :-)
#+begin_src emacs-lisp
  ;; Making it easier to discover Emacs key presses.
  (use-package which-key
    :diminish
    :defer 5
    :config (which-key-mode)
            (which-key-setup-side-window-bottom)
            (setq which-key-idle-delay 0.05))
#+end_src
⟨ Honestly, I seldom even acknowledge this pop-up; but it's always nice to show
to people when I'm promoting Emacs. ⟩

Above, the ~:diminish~ keyword indicates that we do not want the mode's name to be
shown to us in the modeline ---the area near the bottom of Emacs.  It does so by
using the ~diminish~ package, so let's install that.
#+begin_src emacs-lisp
  (use-package diminish
    :defer 5
    :config ;; Let's hide some markers.
      (diminish  'org-indent-mode))
#+end_src

Here are other packages that I want to be installed onto my machine.
#+begin_src emacs-lisp
  ;; Efficient version control.
  ;;
  ;; Bottom of Emacs will show what branch you're on
  ;; and whether the local file is modified or not.
  (use-package magit
    :config (global-set-key (kbd "C-x g") 'magit-status))

  ;; Main use: Org produced htmls are coloured.
  ;; Can be used to export a file into a coloured html.
  (use-package htmlize :defer t)

  ;; “The long lost Emacs string manipulation library”.
  (use-package s)

  ;; Library for working with system files;
  ;; e.g., f-delete, f-mkdir, f-move, f-exists?, f-hidden?
  (use-package f)
#+end_src

Finally, let's try our best to have a [[https://chris.beams.io/posts/git-commit/][useful & consistent commit log]]:
#+begin_src emacs-lisp
  (defun my/git-commit-reminder ()
    (insert "\n\n# The commit subject line ought to finish the phrase:
  # “If applied, this commit will ⟪your subject line here⟫.” ")
    (beginning-of-buffer))

  (add-hook 'git-commit-setup-hook 'my/git-commit-reminder)
#+end_src
